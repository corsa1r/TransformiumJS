{"filter":false,"title":"Immediate (Javascript (browser))","tooltip":"Immediate (Javascript (browser))","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":32,"column":1.7976931348623157e+308},"end":{"row":33,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":33,"column":1.7976931348623157e+308},"end":{"row":34,"column":0}},"text":"\n"}]}]]},"immediate":{"folds":[],"scrolltop":552.9999999999999,"scrollleft":0,"selection":{"start":{"row":34,"column":0},"end":{"row":34,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":27,"state":"start","mode":"ace/mode/javascript"},"type":"jsbrowser","history":["var e = new EventSet()","var EventSet = new Class('EventSet', function() {console.log(EventSet, EventSet.parent, this)});","var e = new EventSet()","var EventSet = new Class('EventSet', function() {console.log(EventSet, EventSet.parent)});","var e = new EventSet()","var EventSet = new Class('EventSet', function() {EventSet.parent.constructor.call(this)});","e.add","EventSet.prototype","EventSet","EventSet.extend(Container);","e.fire()","e.on","e","var e = new EventSet()","EventSet.prototype.fire = function() {};","EventSet.prototype.on = function() {};","var EventSet = new Class('EventSet', function() {});","var c = new Container()","var Container = new Class('Container', function () {\n            Container.parent.constructor.call(this);\n            \n            this.$$items = [];\n            this.$$names = [];\n        });\n        \n        Container.extend(Object);\n        \n        Container.prototype.add = function (item, name) {\n            this.$$items.push(item);\n            this.$$names.push(name);\n            \n            return this;\n        };\n        \n        Container.prototype.get = function (what) {\n            return this.$$items[this.indexOf(what)];\n        };\n        \n        Container.prototype.remove = function (what) {\n            var index = this.indexOf(what);\n            \n            this.$$items.splice(index, 1);\n            this.$$names.splice(index, 1);\n            \n            return this;\n        };\n        \n        Container.prototype.indexOf = function (what) {\n            if(typeof what === 'string' || what instanceof String) {\n                return this.$$names.indexOf(what);\n            }\n            \n            return this.$$items.indexOf(what);\n        };\n        \n        Container.prototype.each = function(iterator) {\n            for(var i = 0, len = this.$$names.length; i < len; i++) {\n                if(iterator(this.$$items[i], this.$$names[i]) === false) {\n                    break;\n                }\n            }\n            \n            return this;\n        };\n        \n        Container.prototype.len = function() {\n            return this.$$names.length;\n        };","var c = new Container()","var Container = new Class('Container', function () {\n            Container.parent.constructor.call(this);\n            \n            this.$$items = [];\n            this.$$names = [];\n        });\n        \n        Container.prototype.add = function (item, name) {\n            this.$$items.push(item);\n            this.$$names.push(name);\n            \n            return this;\n        };\n        \n        Container.prototype.get = function (what) {\n            return this.$$items[this.indexOf(what)];\n        };\n        \n        Container.prototype.remove = function (what) {\n            var index = this.indexOf(what);\n            \n            this.$$items.splice(index, 1);\n            this.$$names.splice(index, 1);\n            \n            return this;\n        };\n        \n        Container.prototype.indexOf = function (what) {\n            if(typeof what === 'string' || what instanceof String) {\n                return this.$$names.indexOf(what);\n            }\n            \n            return this.$$items.indexOf(what);\n        };\n        \n        Container.prototype.each = function(iterator) {\n            for(var i = 0, len = this.$$names.length; i < len; i++) {\n                if(iterator(this.$$items[i], this.$$names[i]) === false) {\n                    break;\n                }\n            }\n            \n            return this;\n        };\n        \n        Container.prototype.len = function() {\n            return this.$$names.length;\n        };","var c = new Container()","var Container = new Class('Container', function () {\n            this.parent.constructor.call(this);\n            \n            this.$$items = [];\n            this.$$names = [];\n        });\n        \n        Container.prototype.add = function (item, name) {\n            this.$$items.push(item);\n            this.$$names.push(name);\n            \n            return this;\n        };\n        \n        Container.prototype.get = function (what) {\n            return this.$$items[this.indexOf(what)];\n        };\n        \n        Container.prototype.remove = function (what) {\n            var index = this.indexOf(what);\n            \n            this.$$items.splice(index, 1);\n            this.$$names.splice(index, 1);\n            \n            return this;\n        };\n        \n        Container.prototype.indexOf = function (what) {\n            if(typeof what === 'string' || what instanceof String) {\n                return this.$$names.indexOf(what);\n            }\n            \n            return this.$$items.indexOf(what);\n        };\n        \n        Container.prototype.each = function(iterator) {\n            for(var i = 0, len = this.$$names.length; i < len; i++) {\n                if(iterator(this.$$items[i], this.$$names[i]) === false) {\n                    break;\n                }\n            }\n            \n            return this;\n        };\n        \n        Container.prototype.len = function() {\n            return this.$$names.length;\n        };","c.getName()","c.remove('position')","c.len()","c.each(function(item, n) {console.warn(item, n)})","c.each(function(item) {console.warn(item)})","c.get('position')","c","c.add({x: 0, y: 10}, 'position');","c","var c = new Container();","\n        var Container = new Class('Container', function () {\n            this.$$items = [];\n            this.$$names = [];\n        });\n        \n        Container.prototype.add = function (item, name) {\n            this.$$items.push(item);\n            this.$$names.push(name);\n            \n            return this;\n        };\n        \n        Container.prototype.get = function (what) {\n            return this.$$items[this.indexOf(what)];\n        };\n        \n        Container.prototype.remove = function (what) {\n            var index = this.indexOf(what);\n            \n            this.$$items.splice(index, 1);\n            this.$$names.splice(index, 1);\n            \n            return this;\n        };\n        \n        Container.prototype.indexOf = function (what) {\n            if(typeof what === 'string' || what instanceof String) {\n                return this.$$names.indexOf(what);\n            }\n            \n            return this.$$items.indexOf(what);\n        };\n        \n        Container.prototype.each = function(iterator) {\n            for(var i = 0, len = this.$$names.length; i < len; i++) {\n                if(iterator(this.$$items[i], this.$$names[i]) === false) {\n                    break;\n                }\n            }\n            \n            return this;\n        };\n        \n        Container.prototype.len = function() {\n            return this.$$names.length;\n        };","e","t.getName()","e.getName()","e instanceof EventSet","e instanceof Class","e instanceof","typeof e","e.test();","var e = new EventSet();","EventSet.extend(Test);","EventSet.prototype.fire = function() {};","EventSet.prototype.on = function() {};","var EventSet = new Class('EventSet', function() {});","t.test()","t","var t = new Test();","Test.test()","Test","var Test = new Class('Test', function() {\n    \n});\n\nTest.prototype.test = function() {return 68;};","var Test = function() {};","clear();","Class"," var Class = function(name, constructor) {\n            constructor._name = name;\n            constructor.extend = this.extend;\n            constructor.getName = this.getName;\n            return constructor;\n        };\n\n        Class.prototype.extend = function(ancestor) {\n            var Prototype = function () {\n                this.parent = ancestor.prototype;\n            };\n            \n            Prototype.prototype = ancestor.prototype;\n            \n            this.prototype = new Prototype();\n            this.prototype.constructor = this;\n        };\n\n        Class.prototype.getName = function() {\n            return this._name;\n        };","alert"],"pos":-1},"hash":"94807802fc2a1968d41e6bb75f56e2e1d5f02da7"}